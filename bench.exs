alias Esolix.Langs.Brainfuck
alias Esolix.DataStructures.Tape

# Tape Benchmarks

tape = Tape.init(cell_byte_size: 1)
tape_loop = Tape.init(cell_byte_size: 1, loop: true)
tape_no_limit = Tape.init()
tape_input = Tape.init(cell_byte_size: 1, input: "This is a reaaaaaally long input, blah blah blah and a lot of this repeats This is a reaaaaaally long input, blah blah blah and a lot of this repeats This is a reaaaaaally long input, blah blah blah and a lot of this repeats This is a reaaaaaally long input, blah blah blah and a lot of this repeats This is a reaaaaaally long input, blah blah blah and a lot of this repeats This is a reaaaaaally long input, blah blah blah and a lot of this repeats This is a reaaaaaally long input, blah blah blah and a lot of this repeats")

Benchee.run(%{
  "inc" => fn -> tape = Tape.inc(tape) end,
  "inc_no_limit" => fn -> tape_no_limit = Tape.inc(tape_no_limit) end,
  "dec" => fn -> tape = Tape.dec(tape) end,
  "dec_no_limit" => fn -> tape_no_limit = Tape.dec(tape_no_limit) end,
  "right" => fn -> tape_loop = Tape.right(tape_loop) end,
  "left" => fn -> tape_loop = Tape.left(tape_loop) end,
  "cell" => fn -> Tape.cell(tape) end,
  "print" => fn -> Tape.print(tape, mode: :ascii) end,
  "handle_input" => fn -> tape_input = Tape.handle_input(tape_input) end,
})



# Brainfuck Benchmarks

# byte_size_bf = """
# Calculate the value 256 and test if it's zero
#     If the interpreter errors on overflow this is where it'll happen
#     ++++++++[>++++++++<-]>[<++++>-]
#     +<[>-<
#         Not zero so multiply by 256 again to get 65536
#         [>++++<-]>[<++++++++>-]<[>++++++++<-]
#         +>[>
#             # Print "32"
#             ++++++++++[>+++++<-]>+.-.[-]<
#         <[-]<->] <[>>
#             # Print "16"
#             +++++++[>+++++++<-]>.+++++.[-]<
#     <<-]] >[>
#         # Print "8"
#         ++++++++[>+++++++<-]>.[-]<
#     <-]<
#     # Print " bit cells\n"
#     +++++++++++[>+++>+++++++++>+++++++++>+<<<<-]>-.>-.+++++++.+++++++++++.<.
#     >>.++.+++++++..<-.>>-
#     Clean up used cells.
#     [[-]<]
# """

# hello_world_bf = "++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++."
# hello_world_100_bf = List.duplicate(hello_world_bf, 100) |> Enum.join("")

# calculator = """
# >>>>>>>>>>+@<<<<<<<<<++++[->>>>>>>>>>>>++++++++<<<<<<<<<<<<]>>>>>>>>>>>>>++++++++++@<<<<<<<<<<<<<+++
# ++++++++[>>>>>>>>>>>>>>++++++<<<<<<<<<<<<<<-]>>>>>>>>>>>>>>.<<<<<<<<<<<<<<++++++++[>>>>>>>>>>>>>>+++
# +++<<<<<<<<<<<<<<-]>>>>>>>>>>>>>>.<<<<<<<<<<<<<<++++[>>>>>>>>>>>>>>----<<<<<<<<<<<<<<-]>>>>>>>>>>>>>
# >-.++++++++.+++++.--------.<<<<<<<<<<<<<<+++++[>>>>>>>>>>>>>>+++<<<<<<<<<<<<<<-]>>>>>>>>>>>>>>.<<<<<
# <<<<<<<<<++++++[>>>>>>>>>>>>>>---<<<<<<<<<<<<<<-]>>>>>>>>>>>>>>.++++++++.<<<<<<<<<<<<<<+++++++[>>>>>
# >>>>>>>>>-----------<<<<<<<<<<<<<<-]>>>>>>>>>>>>>>++.<<<<<<<<<<<<<<+++++++[>>>>>>>>>>>>>>+++++<<<<<<
# <<<<<<<<-]>>>>>>>>>>>>>>.<<<<<<<<<<<<<<++++++[>>>>>>>>>>>>>>+++++<<<<<<<<<<<<<<-]>>>>>>>>>>>>>>.++++
# +++++++.---------.<<<<<<<<<<<<<<++++++[>>>>>>>>>>>>>>+++<<<<<<<<<<<<<<-]>>>>>>>>>>>>>>.---------.---
# --------.<<<<<<<<<<<<<<++++[>>>>>>>>>>>>>>+++++<<<<<<<<<<<<<<-]>>>>>>>>>>>>>>-.-----.+++.<<<<<<<<<<<
# <<<+++++++++[>>>>>>>>>>>>>>---------<<<<<<<<<<<<<<-]>>>>>>>>>>>>>>-.<<<<<<<<<<<<<<+++++++[>>>>>>>>>>
# >>>>---<<<<<<<<<<<<<<-]>>>>>>>>>>>>>>-.[-]@<<<<<<+[>>>>>>>,[<<<<<<<<<<<<<<<+<+>>>>>>>>>>>>>>>>-]<<<<
# <<<<<<<<<<<[>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<-]++++++++[<---->-]<[>+<-]+>[<->[-]]<[[-]>-<]>+[->>>>>>>>
# >>>>>>>[<<<<<<<<<<<<<<<+<+>>>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<[>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<-]+++++++
# ++++[<--------->-]<[>+<-]+>[<->[-]]<[[-]>>>>>>>>>>>>>>>++++++++++.[-]++++++++++.[-]<..<<<<<->-<<<<<<
# <<<-<]>+[->>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<+<+>>>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<[>>>>>>>>>>>>>>>+<<<<<<
# <<<<<<<<<-]++++++++++[<------>-]-<[>+<-]+>[<->[-]]<[[-]>>>>>>>>>-<<<<<<<<-<]>+[->>>>>>>>>>>>>>>[<<<<
# <<<<<<<<<<<+<+>>>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<[>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<-]+++++++[<------>-]-
# <[>+<-]+>[<->[-]]<[[-]>>>>>>>>>>>>>>>>[<<<<<<<<<<<<+>>>>>>>>>>>>-]<<<<+<<<<<<<<<<<-<]>+[->>>>>>>>>>>
# >>>>[<<<<<<<<<<<<<<<+<+>>>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<[>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<-]+++++++++[
# <----->-]<[>+<-]+>[<->[-]]<[[-]>>>>>>>>>>>>>>>>[<<<<<<<<<<<<+>>>>>>>>>>>>-]<<<<+<<<<<<<<<<<-<]>+[->>
# >>>>>>>>>>>>>[<<<<<<<<<<<<<<<+<+>>>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<[>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<-]+
# ++++++[<------>-]<[>+<-]+>[<->[-]]<[[-]>>>>>>>>>>>>>>>>[<<<<<<<<<<<<+>>>>>>>>>>>>-]<<<<+<<<<<<<<<<<-
# <]>+[->>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<+<+>>>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<[>>>>>>>>>>>>>>>+<<<<<<<<<<
# <<<<<-]++++++[<-------->-]+<[>+<-]+>[<->[-]]<[[-]>>>>>>>>>>>>>>>>[<<<<<<<<<<<<+>>>>>>>>>>>>-]<<<<+<<
# <<<<<<<<<-<]>+[->>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<+<+>>>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<[>>>>>>>>>>>>>>>+
# <<<<<<<<<<<<<<<-]++++++[<------>-]-<[>+<-]+>[<->[-]]<[[-]>>>>>>>>>>>>>>>>[<<<<<<<<<<<<+>>>>>>>>>>>>-
# ]<<<<+<<<<<<<<<<<-<]>+[->>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<+<+>>>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<[>>>>>>>>
# >>>>>>>+<<<<<<<<<<<<<<<-]++++++++[<------------>-]++<[>+<-]+>[<->[-]]<[[-]>>>>>>>>>>>>>>>>[<<<<<<<<<
# <<<+>>>>>>>>>>>>-]<<<<+<<<<<<<<<<<-<]>+[-++++++++[->>>>>>>>>>>>>>>------<<<<<<<<<<<<<<<]>>>>>>>>>>>[
# <<<<<<<<<<<+<+>>>>>>>>>>>>-]<<<<<<<<<<<[>>>>>>>>>>>+<<<<<<<<<<<-]+[<->-]+<[>+<-]+>[<->[-]]<[[-]>>[<+
# >-]<[>++++++++++<-]>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<+>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<-<]>+[->>>>>>>>>>>[
# <<<<<<<<<<<+<+>>>>>>>>>>>>-]<<<<<<<<<<<[>>>>>>>>>>>+<<<<<<<<<<<-]+[<->-]<[>+<-]+>[<->[-]]<[[-]>>>[<<
# +>>-]<<[>>++++++++++<<-]>>>>>>>>>>>>>>>[<<<<<<<<<<<<<+>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<-<]>+[->>>>>>>>>
# >>>>>++++++++++.[-]<<<<<+<<<<<<<<<]]]]]]]]]]]>>>>>>>>]@<<<<<[<<<+<+>>>>-]<<<[>>>+<<<-]+++++++[<-----
# ->-]-<[>+<-]+>[<->[-]]<[[-]>>[>>>>>>>>>+<<<<<<<<<-]>[>>>>>>>>+<<<<<<<<-]<<<]>>>>[<<<+<+>>>>-]<<<[>>>
# +<<<-]+++++++[<------>-]<[>+<-]+>[<->[-]]<[[-]>>[->[<<+>>>>>>>>>>+<<<<<<<<-]<<[>>+<<-]>]<<]>>>>[<<<+
# <+>>>>-]<<<[>>>+<<<-]+++++++++[<----->-]<[>+<-]+>[<->[-]]<[[-]>>[>>>>>>>>>+<<<<<<<<<-]>[->>>>>>>>-<<
# <<<<<<]<<<]>>>>[<<<+<+>>>>-]<<<[>>>+<<<-]++++++[<-------->-]+<[>+<-]+>[<->[-]]<[[-]>>>[<<+>>>>>>>>+<
# <<<<<-]<<[>>+<<-]>[->>>>>>>-[<<<<<<<<+<+>>>>>>>>>-]<<<<<<<<[>>>>>>>>+<<<<<<<<-]<[[-]>-<]>+[-<+>]<[[-
# ]>>>[<<+>>>>>>>>+<<<<<<-]<<[>>+<<-]>>>>>>>>>>+<<<<<<<<<<<]>>]<<]>>>>[<<<+<+>>>>-]<<<[>>>+<<<-]++++++
# [<------>-]-<[>+<-]+>[<->[-]]<[[-]>>>[<<+>>>>>>>>+<<<<<<-]<<[>>+<<-]>[->>>>>>>-[<<<<<<<<+<+>>>>>>>>>
# -]<<<<<<<<[>>>>>>>>+<<<<<<<<-]<[[-]>-<]>+[-<+>]<[[-]>>>[<<+>>>>>>>>+<<<<<<-]<<[>>+<<-]<]>>]>[>>>>>>>
# >+<<<<<<<<-]>>>>>>[>>-<<-]<<<<<<<<<]>>>>[<<<+<+>>>>-]<<<[>>>+<<<-]++++++++[<------------>-]++<[>+<-]
# +>[<->[-]]<[[-]>>>>>>>>>>>+<<<<<<<<[>>>>>>>>[<<<<<<<<<[<+<+>>-]<[>+<-]>>>>>>>>>>-]<<<<<<<<<<<[>>>>>>
# >>>>>+<<<<<<<<<<<-]>>>-]<<<]>>>>>>>>>>[<<<<<<<<<+<+>>>>>>>>>>-]<<<<<<<<<[>>>>>>>>>+<<<<<<<<<-]<[[-]>
# >>>>>>>>>>>>.<<<<<<<++++++++++>>>>>[<<<<<<<<<<+>>>>>>>>>>>>>>>>+<<<<<<-]<<<<<<<<<<[>>>>>>>>>>+<<<<<<
# <<<<-]>>>>>>>>>>>>>>>>[-<<<<<<<<<<<-[<<<<<+<+>>>>>>-]<<<<<[>>>>>+<<<<<-]<[[-]>-<]>+[->>>>>>+<+++++++
# +++<<<<<]>>>>>>>>>>>>>>>>]<<<<<<<<<<<<<<<<++++++++++>>>>>[-<<<<<->>>>>]<<<<<[->>>>>+<<<<<]>>>>>>[->>
# >>>>>>>>+<<<<<<<<<<]++++++++++>>>>>>>>>>[-<<<<<<<<<<-[<<<<<<+<+>>>>>>>-]<<<<<<[>>>>>>+<<<<<<-]<[[-]>
# -<]>+[->>>>>>>+<++++++++++<<<<<<]>>>>>>>>>>>>>>>>]<<<<<<<<<<<<<<<<++++++++++>>>>>>[-<<<<<<->>>>>>]<<
# <<<<[->>>>>>+<<<<<<]>>>>>>[<<<<<<+>>>>+>>-]<<<<<<[>>>>>>+<<<<<<-]>>>>>>>[<<<<<<<+>>>>+>>>-]<<<<<<<[>
# >>>>>>+<<<<<<<-]>>>>>>>[<<<<<<<+<+>>>>>>>>-]<<<<<<<[>>>>>>>+<<<<<<<-]<[[-]>++++++++[->>>>>>>++++++<<
# <<<<<]>>>>>>>.<<<<<<<<]>>>>>[<<<<+<+>>>>>-]<<<<[>>>>+<<<<-]<[[-]>++++++++[->>>>>>++++++<<<<<<]>>>>>>
# .<<<<<<<]>++++++++[->>>>>++++++<<<<<]>>>>>.[-]>[-]>[-]<<<<<<<<]
# """


# Benchee.run(%{
#   "hello_world" => fn -> Brainfuck.eval(hello_world_bf, "", [tape_params: [cell_byte_size: 1]]) end,
#   "calculator_add" => fn -> Brainfuck.eval(calculator, "134+55=", [tape_params: [cell_byte_size: 2]]) end,
#   "calculator_sub" => fn -> Brainfuck.eval(calculator, "55-100=", [tape_params: [cell_byte_size: 2]]) end,
#   "calculator_mult" => fn -> Brainfuck.eval(calculator, "134*55=", [tape_params: [cell_byte_size: 2]]) end,
#   "calculator_div" => fn -> Brainfuck.eval(calculator, "134/55=", [tape_params: [cell_byte_size: 2]]) end,
#   "calculator_exp" => fn -> Brainfuck.eval(calculator, "4^6=", [tape_params: [cell_byte_size: 2]]) end,
#   "hello_world_bracket" => fn -> Brainfuck.group_by_brackets(hello_world_bf) end,
#   "hello_worldx100_bracket" => fn -> Brainfuck.group_by_brackets(hello_world_100_bf) end,
#   "byte_size_1" => fn -> Brainfuck.eval(byte_size_bf) end,
#   "byte_size_2" => fn -> Brainfuck.eval(byte_size_bf, "", [tape_params: [cell_byte_size: 2]]) end,
#   "byte_size_4" => fn -> Brainfuck.eval(byte_size_bf, "", [tape_params: [cell_byte_size: 4]]) end,
#
# })
