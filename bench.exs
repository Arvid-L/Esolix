  alias Esolix.Langs.Brainfuck
  alias Esolix.DataStructures.Tape

  # Notes on performance

  # Accessing element in a long grapheme_list, string, or charlist
  # From Fastest to Slowest: Enum.at(charlist, n) -> Enum.at(grapheme_list, n), String.at(string, n)

  # Comparision of elements ("case elem do ...")
  # Comparision to codepoints/numbers faster than comparison to graphemes


  string_10000 = List.duplicate("1234567890", 1000) |> Enum.join()
  string_100000 = List.duplicate("1234567890", 10000) |> Enum.join()
  string_1000000 = List.duplicate("1234567890", 100000) |> Enum.join()
  list_10000 = String.graphemes(string_10000)
  list_100000 = String.graphemes(string_100000)
  list_1000000 = String.graphemes(string_1000000)
  charlist_10000 = String.to_charlist(string_10000)
  charlist_100000 = String.to_charlist(string_100000)
  charlist_1000000 = String.to_charlist(string_1000000)

  codepoint_case = fn (elem, x) ->
    case elem do
      48 -> x + 0
      49 -> x + 1
      50 -> x + 2
      51 -> x + 3
      52 -> x + 4
      53 -> x + 5
      54 -> x + 6
      55 -> x + 7
      56 -> x + 8
      57 -> x + 9
      _ -> x
    end
  end

  grapheme_case = fn (elem, x) ->
    case elem do
      "0" -> x + 0
      "1" -> x + 1
      "2" -> x + 2
      "3" -> x + 3
      "4" -> x + 4
      "5" -> x + 5
      "6" -> x + 6
      "7" -> x + 7
      "8" -> x + 8
      "9" -> x + 9
      _ -> x
    end
  end


  # Access performance

  # Benchee.run(%{
  #   "string_at_10000" => fn -> String.at(string_10000, 5000) end,
  #   "string_at_100000" => fn -> String.at(string_100000, 50000) end,
  #   "string_at_1000000" => fn -> String.at(string_1000000, 500000) end,
  #   "list_at_10000" => fn -> Enum.at(list_10000, 5000) end,
  #   "list_at_100000" => fn -> Enum.at(list_100000, 50000) end,
  #   "list_at_1000000" => fn -> Enum.at(list_1000000, 500000) end,
  #   "charlist_at_10000" => fn -> Enum.at(charlist_10000, 5000) end,
  #   "charlist_at_100000" => fn -> Enum.at(charlist_100000, 50000) end,
  #   "charlist_at_1000000" => fn -> Enum.at(charlist_1000000, 500000) end,
  # })

  # comparision (case elem do) performance

  Benchee.run(%{
    "grapheme_case_10000" => fn -> Enum.map(list_10000, fn elem -> apply(grapheme_case, [elem, 5]) end) end,
    "grapheme_case_100000" => fn -> Enum.map(list_100000, fn elem -> apply(grapheme_case, [elem, 5]) end) end,
    "grapheme_case_1000000" => fn -> Enum.map(list_1000000, fn elem -> apply(grapheme_case, [elem, 5]) end) end,
    "codepoint_case_10000" => fn -> Enum.map(charlist_10000, fn elem -> apply(codepoint_case, [elem, 5]) end) end,
    "codepoint_case_100000" => fn -> Enum.map(charlist_100000, fn elem -> apply(codepoint_case, [elem, 5]) end) end,
    "codepoint_case_1000000" => fn -> Enum.map(charlist_1000000, fn elem -> apply(codepoint_case, [elem, 5]) end) end
  })

  # Tape Benchmarks

  # tape = Tape.init(cell_byte_size: 1)
  # tape_loop = Tape.init(cell_byte_size: 1, loop: true)
  # tape_no_limit = Tape.init()
  # tape_input = Tape.init(cell_byte_size: 1, input: "This is a reaaaaaally long input, blah blah blah and a lot of this repeats This is a reaaaaaally long input, blah blah blah and a lot of this repeats This is a reaaaaaally long input, blah blah blah and a lot of this repeats This is a reaaaaaally long input, blah blah blah and a lot of this repeats This is a reaaaaaally long input, blah blah blah and a lot of this repeats This is a reaaaaaally long input, blah blah blah and a lot of this repeats This is a reaaaaaally long input, blah blah blah and a lot of this repeats")

  # Benchee.run(%{
  #   "inc" => fn -> tape = Tape.inc(tape) end,
  #   "inc_no_limit" => fn -> tape_no_limit = Tape.inc(tape_no_limit) end,
  #   "dec" => fn -> tape = Tape.dec(tape) end,
  #   "dec_no_limit" => fn -> tape_no_limit = Tape.dec(tape_no_limit) end,
  #   "right" => fn -> tape_loop = Tape.right(tape_loop) end,
  #   "left" => fn -> tape_loop = Tape.left(tape_loop) end,
  #   "cell" => fn -> Tape.cell(tape) end,
  #   "print" => fn -> Tape.print(tape, mode: :ascii) end,
  #   "handle_input" => fn -> tape_input = Tape.handle_input(tape_input) end,
  # })




  # Brainfuck Benchmarks

  # byte_size_bf = """
  # Calculate the value 256 and test if it's zero
  #     If the interpreter errors on overflow this is where it'll happen
  #     ++++++++[>++++++++<-]>[<++++>-]
  #     +<[>-<
  #         Not zero so multiply by 256 again to get 65536
  #         [>++++<-]>[<++++++++>-]<[>++++++++<-]
  #         +>[>
  #             # Print "32"
  #             ++++++++++[>+++++<-]>+.-.[-]<
  #         <[-]<->] <[>>
  #             # Print "16"
  #             +++++++[>+++++++<-]>.+++++.[-]<
  #     <<-]] >[>
  #         # Print "8"
  #         ++++++++[>+++++++<-]>.[-]<
  #     <-]<
  #     # Print " bit cells\n"
  #     +++++++++++[>+++>+++++++++>+++++++++>+<<<<-]>-.>-.+++++++.+++++++++++.<.
  #     >>.++.+++++++..<-.>>-
  #     Clean up used cells.
  #     [[-]<]
  # """

  # hello_world_bf = "++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++."
  # hello_world_100_bf = List.duplicate(hello_world_bf, 100) |> Enum.join("")

  # calculator = """
  # >>>>>>>>>>+@<<<<<<<<<++++[->>>>>>>>>>>>++++++++<<<<<<<<<<<<]>>>>>>>>>>>>>++++++++++@<<<<<<<<<<<<<+++
  # ++++++++[>>>>>>>>>>>>>>++++++<<<<<<<<<<<<<<-]>>>>>>>>>>>>>>.<<<<<<<<<<<<<<++++++++[>>>>>>>>>>>>>>+++
  # +++<<<<<<<<<<<<<<-]>>>>>>>>>>>>>>.<<<<<<<<<<<<<<++++[>>>>>>>>>>>>>>----<<<<<<<<<<<<<<-]>>>>>>>>>>>>>
  # >-.++++++++.+++++.--------.<<<<<<<<<<<<<<+++++[>>>>>>>>>>>>>>+++<<<<<<<<<<<<<<-]>>>>>>>>>>>>>>.<<<<<
  # <<<<<<<<<++++++[>>>>>>>>>>>>>>---<<<<<<<<<<<<<<-]>>>>>>>>>>>>>>.++++++++.<<<<<<<<<<<<<<+++++++[>>>>>
  # >>>>>>>>>-----------<<<<<<<<<<<<<<-]>>>>>>>>>>>>>>++.<<<<<<<<<<<<<<+++++++[>>>>>>>>>>>>>>+++++<<<<<<
  # <<<<<<<<-]>>>>>>>>>>>>>>.<<<<<<<<<<<<<<++++++[>>>>>>>>>>>>>>+++++<<<<<<<<<<<<<<-]>>>>>>>>>>>>>>.++++
  # +++++++.---------.<<<<<<<<<<<<<<++++++[>>>>>>>>>>>>>>+++<<<<<<<<<<<<<<-]>>>>>>>>>>>>>>.---------.---
  # --------.<<<<<<<<<<<<<<++++[>>>>>>>>>>>>>>+++++<<<<<<<<<<<<<<-]>>>>>>>>>>>>>>-.-----.+++.<<<<<<<<<<<
  # <<<+++++++++[>>>>>>>>>>>>>>---------<<<<<<<<<<<<<<-]>>>>>>>>>>>>>>-.<<<<<<<<<<<<<<+++++++[>>>>>>>>>>
  # >>>>---<<<<<<<<<<<<<<-]>>>>>>>>>>>>>>-.[-]@<<<<<<+[>>>>>>>,[<<<<<<<<<<<<<<<+<+>>>>>>>>>>>>>>>>-]<<<<
  # <<<<<<<<<<<[>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<-]++++++++[<---->-]<[>+<-]+>[<->[-]]<[[-]>-<]>+[->>>>>>>>
  # >>>>>>>[<<<<<<<<<<<<<<<+<+>>>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<[>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<-]+++++++
  # ++++[<--------->-]<[>+<-]+>[<->[-]]<[[-]>>>>>>>>>>>>>>>++++++++++.[-]++++++++++.[-]<..<<<<<->-<<<<<<
  # <<<-<]>+[->>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<+<+>>>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<[>>>>>>>>>>>>>>>+<<<<<<
  # <<<<<<<<<-]++++++++++[<------>-]-<[>+<-]+>[<->[-]]<[[-]>>>>>>>>>-<<<<<<<<-<]>+[->>>>>>>>>>>>>>>[<<<<
  # <<<<<<<<<<<+<+>>>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<[>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<-]+++++++[<------>-]-
  # <[>+<-]+>[<->[-]]<[[-]>>>>>>>>>>>>>>>>[<<<<<<<<<<<<+>>>>>>>>>>>>-]<<<<+<<<<<<<<<<<-<]>+[->>>>>>>>>>>
  # >>>>[<<<<<<<<<<<<<<<+<+>>>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<[>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<-]+++++++++[
  # <----->-]<[>+<-]+>[<->[-]]<[[-]>>>>>>>>>>>>>>>>[<<<<<<<<<<<<+>>>>>>>>>>>>-]<<<<+<<<<<<<<<<<-<]>+[->>
  # >>>>>>>>>>>>>[<<<<<<<<<<<<<<<+<+>>>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<[>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<-]+
  # ++++++[<------>-]<[>+<-]+>[<->[-]]<[[-]>>>>>>>>>>>>>>>>[<<<<<<<<<<<<+>>>>>>>>>>>>-]<<<<+<<<<<<<<<<<-
  # <]>+[->>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<+<+>>>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<[>>>>>>>>>>>>>>>+<<<<<<<<<<
  # <<<<<-]++++++[<-------->-]+<[>+<-]+>[<->[-]]<[[-]>>>>>>>>>>>>>>>>[<<<<<<<<<<<<+>>>>>>>>>>>>-]<<<<+<<
  # <<<<<<<<<-<]>+[->>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<+<+>>>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<[>>>>>>>>>>>>>>>+
  # <<<<<<<<<<<<<<<-]++++++[<------>-]-<[>+<-]+>[<->[-]]<[[-]>>>>>>>>>>>>>>>>[<<<<<<<<<<<<+>>>>>>>>>>>>-
  # ]<<<<+<<<<<<<<<<<-<]>+[->>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<+<+>>>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<[>>>>>>>>
  # >>>>>>>+<<<<<<<<<<<<<<<-]++++++++[<------------>-]++<[>+<-]+>[<->[-]]<[[-]>>>>>>>>>>>>>>>>[<<<<<<<<<
  # <<<+>>>>>>>>>>>>-]<<<<+<<<<<<<<<<<-<]>+[-++++++++[->>>>>>>>>>>>>>>------<<<<<<<<<<<<<<<]>>>>>>>>>>>[
  # <<<<<<<<<<<+<+>>>>>>>>>>>>-]<<<<<<<<<<<[>>>>>>>>>>>+<<<<<<<<<<<-]+[<->-]+<[>+<-]+>[<->[-]]<[[-]>>[<+
  # >-]<[>++++++++++<-]>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<+>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<-<]>+[->>>>>>>>>>>[
  # <<<<<<<<<<<+<+>>>>>>>>>>>>-]<<<<<<<<<<<[>>>>>>>>>>>+<<<<<<<<<<<-]+[<->-]<[>+<-]+>[<->[-]]<[[-]>>>[<<
  # +>>-]<<[>>++++++++++<<-]>>>>>>>>>>>>>>>[<<<<<<<<<<<<<+>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<-<]>+[->>>>>>>>>
  # >>>>>++++++++++.[-]<<<<<+<<<<<<<<<]]]]]]]]]]]>>>>>>>>]@<<<<<[<<<+<+>>>>-]<<<[>>>+<<<-]+++++++[<-----
  # ->-]-<[>+<-]+>[<->[-]]<[[-]>>[>>>>>>>>>+<<<<<<<<<-]>[>>>>>>>>+<<<<<<<<-]<<<]>>>>[<<<+<+>>>>-]<<<[>>>
  # +<<<-]+++++++[<------>-]<[>+<-]+>[<->[-]]<[[-]>>[->[<<+>>>>>>>>>>+<<<<<<<<-]<<[>>+<<-]>]<<]>>>>[<<<+
  # <+>>>>-]<<<[>>>+<<<-]+++++++++[<----->-]<[>+<-]+>[<->[-]]<[[-]>>[>>>>>>>>>+<<<<<<<<<-]>[->>>>>>>>-<<
  # <<<<<<]<<<]>>>>[<<<+<+>>>>-]<<<[>>>+<<<-]++++++[<-------->-]+<[>+<-]+>[<->[-]]<[[-]>>>[<<+>>>>>>>>+<
  # <<<<<-]<<[>>+<<-]>[->>>>>>>-[<<<<<<<<+<+>>>>>>>>>-]<<<<<<<<[>>>>>>>>+<<<<<<<<-]<[[-]>-<]>+[-<+>]<[[-
  # ]>>>[<<+>>>>>>>>+<<<<<<-]<<[>>+<<-]>>>>>>>>>>+<<<<<<<<<<<]>>]<<]>>>>[<<<+<+>>>>-]<<<[>>>+<<<-]++++++
  # [<------>-]-<[>+<-]+>[<->[-]]<[[-]>>>[<<+>>>>>>>>+<<<<<<-]<<[>>+<<-]>[->>>>>>>-[<<<<<<<<+<+>>>>>>>>>
  # -]<<<<<<<<[>>>>>>>>+<<<<<<<<-]<[[-]>-<]>+[-<+>]<[[-]>>>[<<+>>>>>>>>+<<<<<<-]<<[>>+<<-]<]>>]>[>>>>>>>
  # >+<<<<<<<<-]>>>>>>[>>-<<-]<<<<<<<<<]>>>>[<<<+<+>>>>-]<<<[>>>+<<<-]++++++++[<------------>-]++<[>+<-]
  # +>[<->[-]]<[[-]>>>>>>>>>>>+<<<<<<<<[>>>>>>>>[<<<<<<<<<[<+<+>>-]<[>+<-]>>>>>>>>>>-]<<<<<<<<<<<[>>>>>>
  # >>>>>+<<<<<<<<<<<-]>>>-]<<<]>>>>>>>>>>[<<<<<<<<<+<+>>>>>>>>>>-]<<<<<<<<<[>>>>>>>>>+<<<<<<<<<-]<[[-]>
  # >>>>>>>>>>>>.<<<<<<<++++++++++>>>>>[<<<<<<<<<<+>>>>>>>>>>>>>>>>+<<<<<<-]<<<<<<<<<<[>>>>>>>>>>+<<<<<<
  # <<<<-]>>>>>>>>>>>>>>>>[-<<<<<<<<<<<-[<<<<<+<+>>>>>>-]<<<<<[>>>>>+<<<<<-]<[[-]>-<]>+[->>>>>>+<+++++++
  # +++<<<<<]>>>>>>>>>>>>>>>>]<<<<<<<<<<<<<<<<++++++++++>>>>>[-<<<<<->>>>>]<<<<<[->>>>>+<<<<<]>>>>>>[->>
  # >>>>>>>>+<<<<<<<<<<]++++++++++>>>>>>>>>>[-<<<<<<<<<<-[<<<<<<+<+>>>>>>>-]<<<<<<[>>>>>>+<<<<<<-]<[[-]>
  # -<]>+[->>>>>>>+<++++++++++<<<<<<]>>>>>>>>>>>>>>>>]<<<<<<<<<<<<<<<<++++++++++>>>>>>[-<<<<<<->>>>>>]<<
  # <<<<[->>>>>>+<<<<<<]>>>>>>[<<<<<<+>>>>+>>-]<<<<<<[>>>>>>+<<<<<<-]>>>>>>>[<<<<<<<+>>>>+>>>-]<<<<<<<[>
  # >>>>>>+<<<<<<<-]>>>>>>>[<<<<<<<+<+>>>>>>>>-]<<<<<<<[>>>>>>>+<<<<<<<-]<[[-]>++++++++[->>>>>>>++++++<<
  # <<<<<]>>>>>>>.<<<<<<<<]>>>>>[<<<<+<+>>>>>-]<<<<[>>>>+<<<<-]<[[-]>++++++++[->>>>>>++++++<<<<<<]>>>>>>
  # .<<<<<<<]>++++++++[->>>>>++++++<<<<<]>>>>>.[-]>[-]>[-]<<<<<<<<]
  # """


  # Benchee.run(%{
  #   "hello_world" => fn -> Brainfuck.eval(hello_world_bf, "", [tape_params: [cell_byte_size: 1]]) end,
  #   "calculator_add" => fn -> Brainfuck.eval(calculator, "134+55=", [tape_params: [cell_byte_size: 2]]) end,
  #   "calculator_sub" => fn -> Brainfuck.eval(calculator, "55-100=", [tape_params: [cell_byte_size: 2]]) end,
  #   "calculator_mult" => fn -> Brainfuck.eval(calculator, "134*55=", [tape_params: [cell_byte_size: 2]]) end,
  #   "calculator_div" => fn -> Brainfuck.eval(calculator, "134/55=", [tape_params: [cell_byte_size: 2]]) end,
  #   "calculator_exp" => fn -> Brainfuck.eval(calculator, "4^6=", [tape_params: [cell_byte_size: 2]]) end,
  #   "hello_world_bracket" => fn -> Brainfuck.group_by_brackets(hello_world_bf) end,
  #   "hello_worldx100_bracket" => fn -> Brainfuck.group_by_brackets(hello_world_100_bf) end,
  #   "byte_size_1" => fn -> Brainfuck.eval(byte_size_bf) end,
  #   "byte_size_2" => fn -> Brainfuck.eval(byte_size_bf, "", [tape_params: [cell_byte_size: 2]]) end,
  #   "byte_size_4" => fn -> Brainfuck.eval(byte_size_bf, "", [tape_params: [cell_byte_size: 4]]) end,
  #
  # })
